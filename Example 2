*** Система спауна противников ***

using System;
using System.Collections;
using System.Collections.Generic;
using EmeraldAI;
using Photon.Pun;
using Sirenix.OdinInspector;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.Serialization;

[RequireComponent(typeof(PhotonView))]
    public class HordeModeWaveDirector : MonoSingleton<HordeModeWaveDirector>
    {
        [Serializable]
        public enum PhaseType
        {
            Calm,
            Wave
        }
        
        [Serializable]
        public struct EnemyType
        {
            [FormerlySerializedAs("EnemyPrefab")] [BoxGroup("Settings")]
            public PrefabIdentifier EnemyPrefabIdentifier;
            [BoxGroup("Settings")]
            public float SpawnDelay;
            [BoxGroup("Settings")]
            public int EnemyLimit;
            [BoxGroup("Settings")]
            public int Cost;
        }
        
        [Serializable]
        public struct Phase
        {
            [BoxGroup("Phase Settings")]
            [LabelText("Type")]
            public PhaseType Type;
            [BoxGroup("Phase Settings")] 
            public float PhaseDuration;
            
            [FormerlySerializedAs("CalmPhaseDurationTime")]
            [HideIfGroup("Calm Phase", Condition = "@"+ nameof(Type) + "==HordeModeWaveDirector.PhaseType.Wave")]
            [Space]
            [BoxGroup("Calm Phase/Calm Phase Settings")]
            [LabelText("Start Events")]
            public UnityEvent CalmPhaseStartEvents;
            [BoxGroup("Calm Phase/Calm Phase Settings")]
            [LabelText("End Events")]
            public UnityEvent CalmPhaseEndEvents;
            
            [FormerlySerializedAs("WavePhaseDurationTime")]
            [HideIfGroup("Wave Phase", Condition = "@"+ nameof(Type) + "==HordeModeWaveDirector.PhaseType.Calm")]
            [BoxGroup("Wave Phase/Wave Phase Settings")]
            public int OverallLimit;
            [BoxGroup("Wave Phase/Wave Phase Settings")]
            public int Budget;
            [BoxGroup("Wave Phase/Wave Phase Settings")]
            public float SpawnTickDelay;
            [BoxGroup("Wave Phase/Wave Phase Settings")]
            public List<EnemyType> AvailableEnemy;
            
            [Space]
            [BoxGroup("Wave Phase/Wave Phase Settings")]
            [LabelText("Start Events")]
            public UnityEvent WavePhaseStartEvents;
            [BoxGroup("Wave Phase/Wave Phase Settings")]
            [LabelText("End Events")]
            public UnityEvent WavePhaseEndEvents;
        }

        public static Action OnWavesEnded;

        [BoxGroup("Settings")]
        public bool StartSequenceOnStartGame = true;
        [BoxGroup("Settings")]
        public HordeModeEnemySpawner Spawner;
        [BoxGroup("Settings")]
        public bool ForcedSpawn;
        [BoxGroup("Settings")]
        [Tooltip("Disables spawning of zombies when there is less than the specified time before the end of the wave")]
        public float StopSpawnTimeLimit;
        [BoxGroup("Settings")] 
        public float CalmPhaseEnemyKillDelay;
        [BoxGroup("Settings")]
        public int EnemyLimitForStartKillTimer = 3;
        [BoxGroup("Settings")]
        public List<Phase> Phases = new List<Phase>();

 
        [HideInInspector]
        public int CurrentPhaseIndex = 0;

        
        private PhotonView _photonView;

        private double _currentPhaseStartTime;

        private List<PrefabIdentifier> _currentSpawnEnemySet = new List<PrefabIdentifier>();

        private List<EmeraldAISystem> _aliveEnemiesAI = new List<EmeraldAISystem>();

        private Coroutine _killEnemyTimer;

        private bool _zombieKillTimerStartedInCalmPhase, _sendToPlayerRemainingEnemiesCount, _sequenceStarted;

        protected override void Awake()
        {
            base.Awake();

            if(_photonView == null)
                _photonView = GetComponent<PhotonView>();
            
            if (!_photonView.IsMine)
                return;

            Spawner.EnemyIsSpawned += EnemyIsSpawned;
            
            if (StartSequenceOnStartGame)
                RoomManager.OnGameStart += StartWaveDirectorSequence;
        }

        private void OnValidate()
        {
            if(_photonView == null)
                _photonView = GetComponent<PhotonView>();
        }

        private void Update()
        {
            if (!PhotonNetwork.IsMasterClient)
                return;

            if (_aliveEnemiesAI.Count > 0)
            {
                for (int i = 0; i < _aliveEnemiesAI.Count; i++)
                {
                    if (_aliveEnemiesAI[i] == null || _aliveEnemiesAI[i].IsDead)
                    {
                        _aliveEnemiesAI.RemoveAt(i);
                        if (_sendToPlayerRemainingEnemiesCount)
                            _photonView.RPC(nameof(RPC_SendToPlayersRemainingNumberOfEnemies), RpcTarget.All, _aliveEnemiesAI.Count);
                        //_photonView.RPC(nameof(RPC_SendToPlayersRemainingNumberOfEnemies), RpcTarget.All,
                        //    _aliveEnemiesAI.Count);
                        i--;
                    }
                }
            }
        }

        private void OnDisable()
        {
            if (!_photonView.IsMine)
                return;
            
            RoomManager.OnGameStart -= StartWaveDirectorSequence;
            Spawner.EnemyIsSpawned -= EnemyIsSpawned;
        }

        public void StartWaveDirectorSequence()
        {
            if (_sequenceStarted || !_photonView.IsMine)
                return;
            
            _sequenceStarted = true;
            
            if (Phases[CurrentPhaseIndex].Type == PhaseType.Calm)
                StartCoroutine(CalmPhaseProcess());
            else if (Phases[CurrentPhaseIndex].Type == PhaseType.Wave)
                StartCoroutine(WavePhaseProcess());
        }

        public void KillAllAliveEnemy()
        {
            var damageInfo = new DamageInfo();
            damageInfo.Damage = 10000;

            for (int i = 0; i < _aliveEnemiesAI.Count; i++)
            {
                var zombieAI = _aliveEnemiesAI[i].GetComponent<NetworkEnemy>();

                zombieAI.ApplyDamage(Actor.PlayerLocal(), damageInfo);
            }
            
            _aliveEnemiesAI.Clear();
        }

        private void SpawnTick()
        {
            //TODO: проверка не превышен ли лимит живых зомби
            if (_aliveEnemiesAI.Count >= Phases[CurrentPhaseIndex].OverallLimit)
                return;
            
            //TODO: заполнение сетапа зомби для передачи спаунеру
            var elapsedTime = PhotonNetwork.Time - _currentPhaseStartTime;
            var currentBudget = Phases[CurrentPhaseIndex].Budget * (PhotonNetwork.PlayerList.Length + 1) / 2;
            var addZobiesCount = 0;
            
            while (currentBudget > 0 && _aliveEnemiesAI.Count + _currentSpawnEnemySet.Count < Phases[CurrentPhaseIndex].OverallLimit)
            {
                addZobiesCount = _currentSpawnEnemySet.Count;
                foreach (var zombie in Phases[CurrentPhaseIndex].AvailableEnemy)
                {
                    if (_aliveEnemiesAI.Count + _currentSpawnEnemySet.Count < Phases[CurrentPhaseIndex].OverallLimit
                        && zombie.SpawnDelay <= elapsedTime
                        && currentBudget - zombie.Cost >= 0
                        && EnemyTypeLimitNotExceeded(zombie, _currentSpawnEnemySet))
                    {
                        _currentSpawnEnemySet.Add(zombie.EnemyPrefabIdentifier);
                        currentBudget -= zombie.Cost;
                        Debug.LogFormat("EnemySpawned {0}", zombie.EnemyPrefabIdentifier.prefabName);
                        Debug.LogFormat("Budget: {0}", currentBudget);
                    }
                }
                
                if (addZobiesCount == _currentSpawnEnemySet.Count)
                    break;
                
            }

            //TODO: дозаполнение сетапа последним зомби в списке возможных,
            //если бюджет закончился, но общее количество зомби не достигло предела
            var limitRemainder = Phases[CurrentPhaseIndex].OverallLimit - _currentSpawnEnemySet.Count -
                                 _aliveEnemiesAI.Count;

            if (limitRemainder > 0)
            {
                var lastAvailableEnemyIndex = Phases[CurrentPhaseIndex].AvailableEnemy.Count - 1;
                for (int i = 0; i < limitRemainder; i++)
                {
                    if (Phases[CurrentPhaseIndex].AvailableEnemy[lastAvailableEnemyIndex].SpawnDelay <= elapsedTime)
                        _currentSpawnEnemySet.Add(Phases[CurrentPhaseIndex].AvailableEnemy[lastAvailableEnemyIndex].EnemyPrefabIdentifier);
                }
            }
             
            if (_currentSpawnEnemySet.Count > 0)
            {
                //TODO: посылаем спаунеру сет зомби для спауна
                Spawner.Spawn(_currentSpawnEnemySet);
                _currentSpawnEnemySet.Clear();
            }

        }

        private bool EnemyTypeLimitNotExceeded(EnemyType zombie, List<PrefabIdentifier> currentEnemySetList)
        {
            var counter = 0;
            foreach (var zombieAI in _aliveEnemiesAI)
            {
                var identifier = zombieAI.GetComponent<PrefabIdentifier>();
                if (zombie.EnemyPrefabIdentifier == identifier)
                    counter++;
            }

            foreach (var zombieIdentifier in currentEnemySetList)
            {
                if (zombie.EnemyPrefabIdentifier == zombieIdentifier)
                    counter++;
            }
            
            Debug.LogFormat("Current next zombie count: {0}", counter);

            if (counter < zombie.EnemyLimit)
                return true;
            
            return false;
        }
        
        private void EnemyIsSpawned(GameObject zombie)
        {
            var zombieAI = zombie.GetComponent<EmeraldAISystem>();
            if (zombieAI != null)
                _aliveEnemiesAI.Add(zombieAI);
        }



        void OnPhaseEnded()
        {
            CurrentPhaseIndex++;

            if (CurrentPhaseIndex > Phases.Count - 1)
            {
                OnWavesEnded?.Invoke();
                return;
            }

            if (Phases[CurrentPhaseIndex].Type == PhaseType.Calm)
                StartCoroutine(CalmPhaseProcess());
            else if (Phases[CurrentPhaseIndex].Type == PhaseType.Wave)
                StartCoroutine(WavePhaseProcess());
        }
        
        
        IEnumerator CalmPhaseProcess()
        {
            Phases[CurrentPhaseIndex].CalmPhaseStartEvents.Invoke();
            _currentPhaseStartTime = PhotonNetwork.Time;
            
            double doubleWaitTime = Phases[CurrentPhaseIndex].PhaseDuration + PhotonNetwork.Time;
            double doubleRemainingPhaseTime = Phases[CurrentPhaseIndex].PhaseDuration;
            
            if (_aliveEnemiesAI.Count <= 0)
                _photonView.RPC(nameof(RPC_SendToPlayersWaveTimeDelay), RpcTarget.All, doubleWaitTime, true);
            else
            {
                _sendToPlayerRemainingEnemiesCount = true;
                _photonView.RPC(nameof(RPC_SendToPlayersRemainingNumberOfEnemies), RpcTarget.All, _aliveEnemiesAI.Count);
            }


            while (doubleWaitTime > PhotonNetwork.Time)
            {
                if (_aliveEnemiesAI.Count > 0 && _aliveEnemiesAI.Count <= EnemyLimitForStartKillTimer &&
                    _killEnemyTimer == null)
                {
                    _killEnemyTimer = StartCoroutine(KillEnemyTimer());
                    _zombieKillTimerStartedInCalmPhase = true;
                    _sendToPlayerRemainingEnemiesCount = true;
                }

                if (_aliveEnemiesAI.Count <= 0 && _zombieKillTimerStartedInCalmPhase)
                {
                    _sendToPlayerRemainingEnemiesCount = false;
                    _photonView.RPC(nameof(RPC_SendToPlayersWaveTimeDelay), RpcTarget.All, doubleRemainingPhaseTime + PhotonNetwork.Time, true);
                    _zombieKillTimerStartedInCalmPhase = false;
                    StopCoroutine(_killEnemyTimer);
                    _killEnemyTimer = null;
                }

                doubleRemainingPhaseTime -= Time.deltaTime;
                
                yield return null;
            }

            while (_aliveEnemiesAI.Count > 0 && _killEnemyTimer == null)
            {
                if (_aliveEnemiesAI.Count <= EnemyLimitForStartKillTimer)
                {
                    _killEnemyTimer = StartCoroutine(KillEnemyTimer());
                    _zombieKillTimerStartedInCalmPhase = true;
                }
                yield return null;
            }
             

            while (_killEnemyTimer != null)
            {
                if (_aliveEnemiesAI.Count <= 0 && _zombieKillTimerStartedInCalmPhase)
                {
                    StopCoroutine(_killEnemyTimer);
                    _killEnemyTimer = null;
                }
                
                
                yield return null;
            }
            
            _zombieKillTimerStartedInCalmPhase = false;
            _sendToPlayerRemainingEnemiesCount = false;
            Phases[CurrentPhaseIndex].CalmPhaseEndEvents.Invoke();
            OnPhaseEnded();
        }
        
        IEnumerator WavePhaseProcess()
        {
            Phases[CurrentPhaseIndex].WavePhaseStartEvents.Invoke();
            _currentPhaseStartTime = PhotonNetwork.Time;
            
            double doubleWaitTime = Phases[CurrentPhaseIndex].PhaseDuration + PhotonNetwork.Time;
            _photonView.RPC(nameof(RPC_SendToPlayersWaveTimeDelay), RpcTarget.All, doubleWaitTime, false);            
            
            var spawnDelay = 0f;
            
            while (doubleWaitTime > PhotonNetwork.Time)
            {
                if ((spawnDelay <= 0 || (ForcedSpawn && _aliveEnemiesAI.Count == 0))
                    && StopSpawnTimeLimit <= doubleWaitTime - PhotonNetwork.Time)
                {
                    SpawnTick();
                    
                    if (ForcedSpawn && _aliveEnemiesAI.Count == 0)
                        spawnDelay = Phases[CurrentPhaseIndex].SpawnTickDelay;
                    else
                        spawnDelay = Mathf.Abs(spawnDelay) + Phases[CurrentPhaseIndex].SpawnTickDelay;
                }

                spawnDelay -= Time.deltaTime;
                
                yield return null;
            }
            
            Phases[CurrentPhaseIndex].WavePhaseEndEvents.Invoke();
            OnPhaseEnded();
        }

        IEnumerator KillEnemyTimer()
        {
            var delay = CalmPhaseEnemyKillDelay;
            while (delay > 0)
            {
                yield return null;
                delay -= Time.deltaTime;
            }
            
            KillAllAliveEnemy();
            _killEnemyTimer = null;
        }


        [PunRPC]
        private void RPC_SendToPlayersWaveTimeDelay(double time, bool isLullPhase) => PlayersManagers.LocalPlayer.Tablet.StartWaveWaitTimer(time, isLullPhase);
        [PunRPC]
        private void RPC_SendToPlayersRemainingNumberOfEnemies(int count) => PlayersManagers.LocalPlayer.Tablet.SetRemainingNumberOfEnemies(count);
        
}
